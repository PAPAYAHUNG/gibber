import { UserIcon } from "@heroicons/react/24/solid";
import className from "classnames";
import { useAtom } from "jotai";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useSession } from "next-auth/react";

import { profileManagerAtom } from "../atoms";
import Button from "../components/button";
import NavButton from "../components/button/NavButton";
import Post from "../components/post";
import CreatePost from "../components/post/create";
import { api } from "../utils/api";
import { getProfileId } from "../utils/use-profile";

const Profile: NextPage = () => {
    const router = useRouter();
    const { username } = router.query;

    const utils = api.useContext();

    const profileId = getProfileId();

    const { status: sessionStatus } = useSession();

    const [, setProfileManager] = useAtom(profileManagerAtom);

    const profile = api.profile.getByUsername.useQuery(
        {
            profileId,
            username: username as string,
        },
        {
            enabled: router.isReady,
            retry: (failureCount, error) => {
                return failureCount < 3 && error.data?.httpStatus != 404;
            },
        }
    );

    const posts = api.post.getByProfileId.useQuery(
        {
            profileId: profile.data?.id as string,
        },
        {
            enabled: profile.isSuccess,
        }
    );

    const createFriendship = api.profile.createFriendship.useMutation({
        onSuccess: () => {
            if (profile.data) {
                utils.profile.getByUsername.setData(
                    { profileId, username: profile.data.username },
                    (prevData) => {
                        if (prevData) {
                            prevData.isFollowing = true;
                            prevData.followersCount += 1;
                        }

                        return prevData;
                    }
                );
            }
        },
    });

    const deleteFriendship = api.profile.deleteFriendship.useMutation({
        onSuccess: () => {
            if (profile.data) {
                utils.profile.getByUsername.setData(
                    { profileId, username: profile.data.username },
                    (prevData) => {
                        if (prevData) {
                            prevData.isFollowing = false;
                            prevData.followersCount -= 1;
                        }

                        return prevData;
                    }
                );
            }
        },
    });

    const onFollow = () => {
        if (profileId && profile.data) {
            createFriendship.mutate({
                profileId,
                followedId: profile.data.id,
            });
        }
    };

    const onUnfollow = () => {
        if (profileId && profile.data) {
            deleteFriendship.mutate({
                profileId,
                followedId: profile.data.id,
            });
        }
    };

    if (profile.isError && profile.error.data?.httpStatus === 404) {
        return (
            <>
                <p>This profile does not exist.</p>
            </>
        );
    }

    return (
        <>
            <Head>
                <title>Monroe&apos;s Profile</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {profile.isLoading && (
                <div className="flex h-screen items-center justify-center">
                    <svg
                        className="-ml-1 mr-3 h-8 w-8 animate-spin text-red-500"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                    >
                        <circle
                            className="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="4"
                        ></circle>
                        <path
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                    </svg>
                </div>
            )}
            {profile.data && (
                <div className="max-w-[615px]">
                    <div className="aspect-w-3 aspect-h-1 bg-neutral-200">
                        {profile.data.header && (
                            <Image
                                alt="Person's header"
                                src={profile.data.header.url}
                                width={615}
                                height={205}
                            />
                        )}
                    </div>
                    <div className="absolute left-6 top-2.5">
                        <NavButton />
                    </div>
                    <div className="px-6 pt-2">
                        <div className="mb-7 flex">
                            <div className="relative shrink-0 basis-[100px]">
                                <div
                                    className={className(
                                        "absolute top-[-50px] box-content h-[100px] w-[100px] overflow-hidden rounded-full border-2 border-white bg-neutral-200",
                                        {
                                            "border-opacity-25 bg-clip-padding":
                                                profile.data.avatar,
                                        }
                                    )}
                                >
                                    {profile.data.avatar && (
                                        <Image
                                            alt="Person's avatar"
                                            src={profile.data.avatar.url}
                                            width={100}
                                            height={100}
                                        />
                                    )}
                                    {!profile.data.avatar && (
                                        <UserIcon className="m-[25%] w-1/2 text-neutral-400" />
                                    )}
                                </div>
                            </div>
                            <div className="ml-3.5 min-w-0">
                                <p className="text-lg">{profile.data.name}</p>
                                <p className="overflow-hidden text-ellipsis">
                                    {profile.data.username}@localhost:3000
                                </p>
                            </div>
                        </div>
                        {profile.data.id !== profileId &&
                            sessionStatus === "authenticated" && (
                                <div className="flex">
                                    <Button
                                        color={
                                            profile.data.isFollowing
                                                ? "secondary"
                                                : "primary"
                                        }
                                        className="grow"
                                        onClick={
                                            profile.data.isFollowing
                                                ? onUnfollow
                                                : onFollow
                                        }
                                    >
                                        {profile.data.isFollowing
                                            ? "Unfollow"
                                            : "Follow"}
                                    </Button>
                                </div>
                            )}
                        {profile.data.id === profileId && (
                            <div className="flex">
                                <Button
                                    color="secondary"
                                    className="grow"
                                    onClick={() => setProfileManager("edit")}
                                >
                                    Edit Profile
                                </Button>
                            </div>
                        )}
                        {profile.data.summary && (
                            <div className="mt-4">
                                <p>{profile.data.summary}</p>
                            </div>
                        )}
                        <div className="mt-3.5 flex">
                            <p>
                                <span className="font-semibold">
                                    {profile.data.followersCount}
                                </span>
                                &nbsp;Followers
                            </p>
                            <p>
                                <span className="ml-5 font-semibold">
                                    {profile.data.followingCount}
                                </span>
                                &nbsp;Following
                            </p>
                        </div>
                    </div>
                    <div className="mt-3.5 flex h-10 space-x-3.5 overflow-auto border-b-2 border-neutral-50">
                        <div className="ml-3.5 flex h-full shrink-0 items-center rounded-t-lg bg-red-50 px-6">
                            <p className="font-semibold text-red-600">Posts</p>
                        </div>
                        <div className="flex h-full shrink-0 items-center rounded-t-lg px-6">
                            <p className="font-semibold text-neutral-600">
                                Posts & replies
                            </p>
                        </div>
                        <div className="flex h-full shrink-0 items-center rounded-t-lg px-6">
                            <p className="font-semibold text-neutral-600">
                                Media
                            </p>
                        </div>
                    </div>
                    {sessionStatus === "authenticated" &&
                        profile.data.id === profileId && <CreatePost />}
                    {posts.data &&
                        posts.data.map((post) => (
                            <Post post={post} key={post.id} />
                        ))}
                    {posts.isFetched && posts.data?.length === 0 && (
                        <div className="bg-neutral-50 p-4 text-neutral-800">
                            There are no posts here.
                        </div>
                    )}
                </div>
            )}
        </>
    );
};

export default Profile;
